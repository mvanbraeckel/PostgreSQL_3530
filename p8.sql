/*
 * Program 8: Adds a new transaction.
 *  Each time the program is executed, it takes a vendor number, an account number, and an amount from the user.
 *      The program first checks the validity of the vendor number and account number.
 *  The transaction number is generated by the program.
 *  The date of the transaction should be the date on which the program is executed and assigned by the computer automatically.
 *  The program stores the new transaction into the transaction table,
 *      it then updates the balances of the related customer and vendor with the amount of the new transaction.
 *  It then displays the new transaction, and the updated customer and vendor records. (5%)
*/

create or replace function q08(v_no CHAR(5), c_acc CHAR(5), t_amt NUMERIC(10,2))
        returns table (
            vendor_num CHAR(5), cust_acc CHAR(5), trans_num CHAR(5), trans_date DATE, trans_amount NUMERIC(10,2),
            cust_name CHAR(20), cust_prov CHAR(5), cust_bal NUMERIC(10,2), cust_lim INT,
            vendor_name CHAR(20), vendor_city CHAR(10), vendor_bal NUMERIC(10,2)
        ) as $$

    declare
        -- default 0=false, 1=true
        invalid_vno boolean := 0;
        invalid_acc boolean := 0;
        t_no char(5);
        id int := 1;
        curr_date date := (SELECT CURRENT_DATE);

    begin
        if not exists(select vno from vendor where vno=v_no) then
            invalid_vno := 1;
            raise exception 'Nonexistent vendor number = %', v_no;
        end if;
        if not exists(select account from customer where account=c_acc) then
            invalid_acc := 1;
            raise exception 'Nonexistent customer account number = %', c_acc;
        end if;

        if not invalid_vno and not invalid_acc then
            loop
                if not exists(select tno from transaction where tno=('T' || id)) then
                    t_no := 'T' || id;
                    --raise notice 'new tno = %', t_no;
                    exit;
                else
                    id := id + 1;
                end if;
            end loop;

            --curr_date := (SELECT CURRENT_DATE);

            --NOTE: the trans amount increase customer credit card owing amount and increases vendor total money, ie:
            --NOTE: cbal increases because they now owe more money on their credit card
            --NOTE: vbal increases because vendor now has more money
            insert into transaction values (t_no, v_no, c_acc, curr_date, t_amt);
            update customer set cbalance = cbalance + t_amt where account=c_acc;
            update vendor set vbalance = vbalance + t_amt where vno=v_no;

            return query select * from transaction natural join customer natural join vendor where tno=t_no;
        end if;
    end;
$$ language plpgsql;
